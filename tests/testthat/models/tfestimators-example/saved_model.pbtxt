saved_model_schema_version: 1
meta_graphs {
  meta_info_def {
    stripped_op_list {
      op {
        name: "Add"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_STRING
            }
          }
        }
      }
      op {
        name: "All"
        input_arg {
          name: "input"
          type: DT_BOOL
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type: DT_BOOL
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Assert"
        input_arg {
          name: "condition"
          type: DT_BOOL
        }
        input_arg {
          name: "data"
          type_list_attr: "T"
        }
        attr {
          name: "T"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "summarize"
          type: "int"
          default_value {
            i: 3
          }
        }
        is_stateful: true
      }
      op {
        name: "Assign"
        input_arg {
          name: "ref"
          type_attr: "T"
          is_ref: true
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        output_arg {
          name: "output_ref"
          type_attr: "T"
          is_ref: true
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "validate_shape"
          type: "bool"
          default_value {
            b: true
          }
        }
        attr {
          name: "use_locking"
          type: "bool"
          default_value {
            b: true
          }
        }
        allows_uninitialized_input: true
      }
      op {
        name: "BiasAdd"
        input_arg {
          name: "value"
          type_attr: "T"
        }
        input_arg {
          name: "bias"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        attr {
          name: "data_format"
          type: "string"
          default_value {
            s: "NHWC"
          }
          allowed_values {
            list {
              s: "NHWC"
              s: "NCHW"
            }
          }
        }
      }
      op {
        name: "Cast"
        input_arg {
          name: "x"
          type_attr: "SrcT"
        }
        output_arg {
          name: "y"
          type_attr: "DstT"
        }
        attr {
          name: "SrcT"
          type: "type"
        }
        attr {
          name: "DstT"
          type: "type"
        }
      }
      op {
        name: "ConcatV2"
        input_arg {
          name: "values"
          type_attr: "T"
          number_attr: "N"
        }
        input_arg {
          name: "axis"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 2
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Const"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "value"
          type: "tensor"
        }
        attr {
          name: "dtype"
          type: "type"
        }
      }
      op {
        name: "Equal"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_QUINT8
              type: DT_QINT8
              type: DT_QINT32
              type: DT_STRING
              type: DT_BOOL
              type: DT_COMPLEX128
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "GreaterEqual"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_UINT16
              type: DT_HALF
            }
          }
        }
      }
      op {
        name: "HistogramSummary"
        input_arg {
          name: "tag"
          type: DT_STRING
        }
        input_arg {
          name: "values"
          type_attr: "T"
        }
        output_arg {
          name: "summary"
          type: DT_STRING
        }
        attr {
          name: "T"
          type: "type"
          default_value {
            type: DT_FLOAT
          }
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_UINT16
              type: DT_HALF
            }
          }
        }
      }
      op {
        name: "Identity"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Less"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_UINT16
              type: DT_HALF
            }
          }
        }
      }
      op {
        name: "MatMul"
        input_arg {
          name: "a"
          type_attr: "T"
        }
        input_arg {
          name: "b"
          type_attr: "T"
        }
        output_arg {
          name: "product"
          type_attr: "T"
        }
        attr {
          name: "transpose_a"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "transpose_b"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Mean"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Merge"
        input_arg {
          name: "inputs"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        output_arg {
          name: "value_index"
          type: DT_INT32
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
      }
      op {
        name: "MergeV2Checkpoints"
        input_arg {
          name: "checkpoint_prefixes"
          type: DT_STRING
        }
        input_arg {
          name: "destination_prefix"
          type: DT_STRING
        }
        attr {
          name: "delete_old_dirs"
          type: "bool"
          default_value {
            b: true
          }
        }
        is_stateful: true
      }
      op {
        name: "Mul"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "NoOp"
      }
      op {
        name: "OneHot"
        input_arg {
          name: "indices"
          type_attr: "TI"
        }
        input_arg {
          name: "depth"
          type: DT_INT32
        }
        input_arg {
          name: "on_value"
          type_attr: "T"
        }
        input_arg {
          name: "off_value"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "axis"
          type: "int"
          default_value {
            i: -1
          }
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "TI"
          type: "type"
          default_value {
            type: DT_INT64
          }
          allowed_values {
            list {
              type: DT_UINT8
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Pack"
        input_arg {
          name: "values"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "axis"
          type: "int"
          default_value {
            i: 0
          }
        }
      }
      op {
        name: "ParseExample"
        input_arg {
          name: "serialized"
          type: DT_STRING
        }
        input_arg {
          name: "names"
          type: DT_STRING
        }
        input_arg {
          name: "sparse_keys"
          type: DT_STRING
          number_attr: "Nsparse"
        }
        input_arg {
          name: "dense_keys"
          type: DT_STRING
          number_attr: "Ndense"
        }
        input_arg {
          name: "dense_defaults"
          type_list_attr: "Tdense"
        }
        output_arg {
          name: "sparse_indices"
          type: DT_INT64
          number_attr: "Nsparse"
        }
        output_arg {
          name: "sparse_values"
          type_list_attr: "sparse_types"
        }
        output_arg {
          name: "sparse_shapes"
          type: DT_INT64
          number_attr: "Nsparse"
        }
        output_arg {
          name: "dense_values"
          type_list_attr: "Tdense"
        }
        attr {
          name: "Nsparse"
          type: "int"
          has_minimum: true
        }
        attr {
          name: "Ndense"
          type: "int"
          has_minimum: true
        }
        attr {
          name: "sparse_types"
          type: "list(type)"
          has_minimum: true
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_INT64
              type: DT_STRING
            }
          }
        }
        attr {
          name: "Tdense"
          type: "list(type)"
          has_minimum: true
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_INT64
              type: DT_STRING
            }
          }
        }
        attr {
          name: "dense_shapes"
          type: "list(shape)"
          has_minimum: true
        }
      }
      op {
        name: "Placeholder"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
          default_value {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      op {
        name: "RandomUniform"
        input_arg {
          name: "shape"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "seed"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "seed2"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "dtype"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        is_stateful: true
      }
      op {
        name: "Relu"
        input_arg {
          name: "features"
          type_attr: "T"
        }
        output_arg {
          name: "activations"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_UINT16
              type: DT_HALF
            }
          }
        }
      }
      op {
        name: "Reshape"
        input_arg {
          name: "tensor"
          type_attr: "T"
        }
        input_arg {
          name: "shape"
          type_attr: "Tshape"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tshape"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "RestoreV2"
        input_arg {
          name: "prefix"
          type: DT_STRING
        }
        input_arg {
          name: "tensor_names"
          type: DT_STRING
        }
        input_arg {
          name: "shape_and_slices"
          type: DT_STRING
        }
        output_arg {
          name: "tensors"
          type_list_attr: "dtypes"
        }
        attr {
          name: "dtypes"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        is_stateful: true
      }
      op {
        name: "SaveV2"
        input_arg {
          name: "prefix"
          type: DT_STRING
        }
        input_arg {
          name: "tensor_names"
          type: DT_STRING
        }
        input_arg {
          name: "shape_and_slices"
          type: DT_STRING
        }
        input_arg {
          name: "tensors"
          type_list_attr: "dtypes"
        }
        attr {
          name: "dtypes"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        is_stateful: true
      }
      op {
        name: "ScalarSummary"
        input_arg {
          name: "tags"
          type: DT_STRING
        }
        input_arg {
          name: "values"
          type_attr: "T"
        }
        output_arg {
          name: "summary"
          type: DT_STRING
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_UINT16
              type: DT_HALF
            }
          }
        }
      }
      op {
        name: "Shape"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "out_type"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "out_type"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "ShardedFilename"
        input_arg {
          name: "basename"
          type: DT_STRING
        }
        input_arg {
          name: "shard"
          type: DT_INT32
        }
        input_arg {
          name: "num_shards"
          type: DT_INT32
        }
        output_arg {
          name: "filename"
          type: DT_STRING
        }
      }
      op {
        name: "SparseToDense"
        input_arg {
          name: "sparse_indices"
          type_attr: "Tindices"
        }
        input_arg {
          name: "output_shape"
          type_attr: "Tindices"
        }
        input_arg {
          name: "sparse_values"
          type_attr: "T"
        }
        input_arg {
          name: "default_value"
          type_attr: "T"
        }
        output_arg {
          name: "dense"
          type_attr: "T"
        }
        attr {
          name: "validate_indices"
          type: "bool"
          default_value {
            b: true
          }
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tindices"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "StridedSlice"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "begin"
          type_attr: "Index"
        }
        input_arg {
          name: "end"
          type_attr: "Index"
        }
        input_arg {
          name: "strides"
          type_attr: "Index"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Index"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        attr {
          name: "begin_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "end_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "ellipsis_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "new_axis_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "shrink_axis_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
      }
      op {
        name: "StringJoin"
        input_arg {
          name: "inputs"
          type: DT_STRING
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type: DT_STRING
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "separator"
          type: "string"
          default_value {
            s: ""
          }
        }
      }
      op {
        name: "Sub"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Sum"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Switch"
        input_arg {
          name: "data"
          type_attr: "T"
        }
        input_arg {
          name: "pred"
          type: DT_BOOL
        }
        output_arg {
          name: "output_false"
          type_attr: "T"
        }
        output_arg {
          name: "output_true"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "VariableV2"
        output_arg {
          name: "ref"
          type_attr: "dtype"
          is_ref: true
        }
        attr {
          name: "shape"
          type: "shape"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "container"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "shared_name"
          type: "string"
          default_value {
            s: ""
          }
        }
        is_stateful: true
      }
    }
    tags: "serve"
    tensorflow_version: "1.4.0"
    tensorflow_git_version: "v1.4.0-rc1-11-g130a514"
  }
  graph_def {
    node {
      name: "global_step/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@global_step"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node {
      name: "global_step"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@global_step"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "global_step/Assign"
      op: "Assign"
      input: "global_step"
      input: "global_step/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@global_step"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "global_step/read"
      op: "Identity"
      input: "global_step"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@global_step"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "input_example_tensor"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: -1
            }
          }
        }
      }
    }
    node {
      name: "ParseExample/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "ParseExample/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "ParseExample/ParseExample/names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "ParseExample/ParseExample/sparse_keys_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "x2"
          }
        }
      }
    }
    node {
      name: "ParseExample/ParseExample/dense_keys_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "label"
          }
        }
      }
    }
    node {
      name: "ParseExample/ParseExample/dense_keys_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "x1"
          }
        }
      }
    }
    node {
      name: "ParseExample/ParseExample"
      op: "ParseExample"
      input: "input_example_tensor"
      input: "ParseExample/ParseExample/names"
      input: "ParseExample/ParseExample/sparse_keys_0"
      input: "ParseExample/ParseExample/dense_keys_0"
      input: "ParseExample/ParseExample/dense_keys_1"
      input: "ParseExample/Const"
      input: "ParseExample/Const_1"
      attr {
        key: "Ndense"
        value {
          i: 2
        }
      }
      attr {
        key: "Nsparse"
        value {
          i: 1
        }
      }
      attr {
        key: "Tdense"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: 2
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dense_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "sparse_types"
        value {
          list {
            type: DT_INT64
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x1/Shape"
      op: "Shape"
      input: "ParseExample/ParseExample:4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x1/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x1/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x1/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x1/strided_slice"
      op: "StridedSlice"
      input: "dnn/input_from_feature_columns/input_layer/x1/Shape"
      input: "dnn/input_from_feature_columns/input_layer/x1/strided_slice/stack"
      input: "dnn/input_from_feature_columns/input_layer/x1/strided_slice/stack_1"
      input: "dnn/input_from_feature_columns/input_layer/x1/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x1/Reshape/shape/1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x1/Reshape/shape"
      op: "Pack"
      input: "dnn/input_from_feature_columns/input_layer/x1/strided_slice"
      input: "dnn/input_from_feature_columns/input_layer/x1/Reshape/shape/1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x1/Reshape"
      op: "Reshape"
      input: "ParseExample/ParseExample:4"
      input: "dnn/input_from_feature_columns/input_layer/x1/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/num_buckets/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/num_buckets"
      op: "Cast"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/num_buckets/x"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/zero/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/zero"
      op: "Cast"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/zero/x"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Less"
      op: "Less"
      input: "ParseExample/ParseExample:1"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/num_buckets"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/All"
      op: "All"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Less"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Const"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Switch"
      op: "Switch"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/All"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/All"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
      op: "Identity"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_f"
      op: "Identity"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Switch"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
      op: "Identity"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/All"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/NoOp"
      op: "NoOp"
      input: "^dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency"
      op: "Identity"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
      input: "^dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch"
      op: "Switch"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/All"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/All"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_1"
      op: "Switch"
      input: "ParseExample/ParseExample:1"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@ParseExample/ParseExample"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_2"
      op: "Switch"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/num_buckets"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/input_from_feature_columns/input_layer/x2_indicator/num_buckets"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert"
      op: "Assert"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_1"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_2"
      attr {
        key: "T"
        value {
          list {
            type: DT_INT64
            type: DT_INT64
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency_1"
      op: "Identity"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_f"
      input: "^dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_f"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Merge"
      op: "Merge"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency_1"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/GreaterEqual"
      op: "GreaterEqual"
      input: "ParseExample/ParseExample:1"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/zero"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/All"
      op: "All"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/GreaterEqual"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Const"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Switch"
      op: "Switch"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/All"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/All"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
      op: "Identity"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_f"
      op: "Identity"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Switch"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/pred_id"
      op: "Identity"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/All"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/NoOp"
      op: "NoOp"
      input: "^dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency"
      op: "Identity"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
      input: "^dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch"
      op: "Switch"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/All"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/pred_id"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/All"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch_1"
      op: "Switch"
      input: "ParseExample/ParseExample:1"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/pred_id"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@ParseExample/ParseExample"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert"
      op: "Assert"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch_1"
      attr {
        key: "T"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency_1"
      op: "Identity"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_f"
      input: "^dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_f"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Merge"
      op: "Merge"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency_1"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/Identity"
      op: "Identity"
      input: "ParseExample/ParseExample:1"
      input: "^dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Merge"
      input: "^dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Merge"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/SparseToDense/default_value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: -1
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/SparseToDense"
      op: "SparseToDense"
      input: "ParseExample/ParseExample"
      input: "ParseExample/ParseExample:2"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/Identity"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/SparseToDense/default_value"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/one_hot/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/one_hot/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/one_hot/depth"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/one_hot/on_value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/one_hot/off_value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/one_hot"
      op: "OneHot"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/SparseToDense"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/one_hot/depth"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/one_hot/on_value"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/one_hot/off_value"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "TI"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 26
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: -1
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/Sum/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -2
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/Sum"
      op: "Sum"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/one_hot"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/Sum/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 26
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/Shape"
      op: "Shape"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/Sum"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/strided_slice"
      op: "StridedSlice"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/Shape"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/strided_slice/stack"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/strided_slice/stack_1"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/Reshape/shape/1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 26
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/Reshape/shape"
      op: "Pack"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/strided_slice"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/Reshape/shape/1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/x2_indicator/Reshape"
      op: "Reshape"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/Sum"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 26
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dnn/input_from_feature_columns/input_layer/concat"
      op: "ConcatV2"
      input: "dnn/input_from_feature_columns/input_layer/x1/Reshape"
      input: "dnn/input_from_feature_columns/input_layer/x2_indicator/Reshape"
      input: "dnn/input_from_feature_columns/input_layer/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 27
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\033\000\000\000\n\000\000\000"
          }
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.402693629265
          }
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.402693629265
          }
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 27
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
      op: "Sub"
      input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
      input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
      op: "Mul"
      input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
      input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 27
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
      op: "Add"
      input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
      input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 27
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_0/kernel/part_0"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 27
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 27
            }
            dim {
              size: 10
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_0/kernel/part_0/Assign"
      op: "Assign"
      input: "dnn/hiddenlayer_0/kernel/part_0"
      input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 27
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_0/kernel/part_0/read"
      op: "Identity"
      input: "dnn/hiddenlayer_0/kernel/part_0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 27
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_0/bias/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 10
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_0/bias/part_0"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_0/bias/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_0/bias/part_0/Assign"
      op: "Assign"
      input: "dnn/hiddenlayer_0/bias/part_0"
      input: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_0/bias/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_0/bias/part_0/read"
      op: "Identity"
      input: "dnn/hiddenlayer_0/bias/part_0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_0/bias/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_0/kernel"
      op: "Identity"
      input: "dnn/hiddenlayer_0/kernel/part_0/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 27
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_0/MatMul"
      op: "MatMul"
      input: "dnn/input_from_feature_columns/input_layer/concat"
      input: "dnn/hiddenlayer_0/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_0/bias"
      op: "Identity"
      input: "dnn/hiddenlayer_0/bias/part_0/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_0/BiasAdd"
      op: "BiasAdd"
      input: "dnn/hiddenlayer_0/MatMul"
      input: "dnn/hiddenlayer_0/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_0/Relu"
      op: "Relu"
      input: "dnn/hiddenlayer_0/BiasAdd"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/zero_fraction/zero"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "dnn/zero_fraction/Equal"
      op: "Equal"
      input: "dnn/hiddenlayer_0/Relu"
      input: "dnn/zero_fraction/zero"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/zero_fraction/Cast"
      op: "Cast"
      input: "dnn/zero_fraction/Equal"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/zero_fraction/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "dnn/zero_fraction/Mean"
      op: "Mean"
      input: "dnn/zero_fraction/Cast"
      input: "dnn/zero_fraction/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
          }
        }
      }
    }
    node {
      name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
      op: "ScalarSummary"
      input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
      input: "dnn/zero_fraction/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dnn/dnn/hiddenlayer_0/activation/tag"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "dnn/dnn/hiddenlayer_0/activation"
          }
        }
      }
    }
    node {
      name: "dnn/dnn/hiddenlayer_0/activation"
      op: "HistogramSummary"
      input: "dnn/dnn/hiddenlayer_0/activation/tag"
      input: "dnn/hiddenlayer_0/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\n\000\000\000\n\000\000\000"
          }
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.547722578049
          }
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.547722578049
          }
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/sub"
      op: "Sub"
      input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/max"
      input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/mul"
      op: "Mul"
      input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/RandomUniform"
      input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform"
      op: "Add"
      input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/mul"
      input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_1/kernel/part_0"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 10
            }
            dim {
              size: 10
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_1/kernel/part_0/Assign"
      op: "Assign"
      input: "dnn/hiddenlayer_1/kernel/part_0"
      input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_1/kernel/part_0/read"
      op: "Identity"
      input: "dnn/hiddenlayer_1/kernel/part_0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_1/bias/part_0/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_1/bias/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 10
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_1/bias/part_0"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_1/bias/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 10
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_1/bias/part_0/Assign"
      op: "Assign"
      input: "dnn/hiddenlayer_1/bias/part_0"
      input: "dnn/hiddenlayer_1/bias/part_0/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_1/bias/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_1/bias/part_0/read"
      op: "Identity"
      input: "dnn/hiddenlayer_1/bias/part_0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_1/bias/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_1/kernel"
      op: "Identity"
      input: "dnn/hiddenlayer_1/kernel/part_0/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_1/MatMul"
      op: "MatMul"
      input: "dnn/hiddenlayer_0/Relu"
      input: "dnn/hiddenlayer_1/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_1/bias"
      op: "Identity"
      input: "dnn/hiddenlayer_1/bias/part_0/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_1/BiasAdd"
      op: "BiasAdd"
      input: "dnn/hiddenlayer_1/MatMul"
      input: "dnn/hiddenlayer_1/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node {
      name: "dnn/hiddenlayer_1/Relu"
      op: "Relu"
      input: "dnn/hiddenlayer_1/BiasAdd"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/zero_fraction_1/zero"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "dnn/zero_fraction_1/Equal"
      op: "Equal"
      input: "dnn/hiddenlayer_1/Relu"
      input: "dnn/zero_fraction_1/zero"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/zero_fraction_1/Cast"
      op: "Cast"
      input: "dnn/zero_fraction_1/Equal"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/zero_fraction_1/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "dnn/zero_fraction_1/Mean"
      op: "Mean"
      input: "dnn/zero_fraction_1/Cast"
      input: "dnn/zero_fraction_1/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values/tags"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
          }
        }
      }
    }
    node {
      name: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
      op: "ScalarSummary"
      input: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values/tags"
      input: "dnn/zero_fraction_1/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dnn/dnn/hiddenlayer_1/activation/tag"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "dnn/dnn/hiddenlayer_1/activation"
          }
        }
      }
    }
    node {
      name: "dnn/dnn/hiddenlayer_1/activation"
      op: "HistogramSummary"
      input: "dnn/dnn/hiddenlayer_1/activation/tag"
      input: "dnn/hiddenlayer_1/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/logits/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\n\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/logits/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.73854893446
          }
        }
      }
    }
    node {
      name: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/logits/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.73854893446
          }
        }
      }
    }
    node {
      name: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/logits/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
      op: "Sub"
      input: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
      input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/logits/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
      op: "Mul"
      input: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
      input: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/logits/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/logits/kernel/part_0/Initializer/random_uniform"
      op: "Add"
      input: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
      input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/logits/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/logits/kernel/part_0"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/logits/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 10
            }
            dim {
              size: 1
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "dnn/logits/kernel/part_0/Assign"
      op: "Assign"
      input: "dnn/logits/kernel/part_0"
      input: "dnn/logits/kernel/part_0/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/logits/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "dnn/logits/kernel/part_0/read"
      op: "Identity"
      input: "dnn/logits/kernel/part_0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/logits/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/logits/bias/part_0/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/logits/bias/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "dnn/logits/bias/part_0"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/logits/bias/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "dnn/logits/bias/part_0/Assign"
      op: "Assign"
      input: "dnn/logits/bias/part_0"
      input: "dnn/logits/bias/part_0/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/logits/bias/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "dnn/logits/bias/part_0/read"
      op: "Identity"
      input: "dnn/logits/bias/part_0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/logits/bias/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/logits/kernel"
      op: "Identity"
      input: "dnn/logits/kernel/part_0/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/logits/MatMul"
      op: "MatMul"
      input: "dnn/hiddenlayer_1/Relu"
      input: "dnn/logits/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "dnn/logits/bias"
      op: "Identity"
      input: "dnn/logits/bias/part_0/read"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/logits/BiasAdd"
      op: "BiasAdd"
      input: "dnn/logits/MatMul"
      input: "dnn/logits/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "data_format"
        value {
          s: "NHWC"
        }
      }
    }
    node {
      name: "dnn/zero_fraction_2/zero"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "dnn/zero_fraction_2/Equal"
      op: "Equal"
      input: "dnn/logits/BiasAdd"
      input: "dnn/zero_fraction_2/zero"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/zero_fraction_2/Cast"
      op: "Cast"
      input: "dnn/zero_fraction_2/Equal"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/zero_fraction_2/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "dnn/zero_fraction_2/Mean"
      op: "Mean"
      input: "dnn/zero_fraction_2/Cast"
      input: "dnn/zero_fraction_2/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "dnn/dnn/logits/fraction_of_zero_values/tags"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "dnn/dnn/logits/fraction_of_zero_values"
          }
        }
      }
    }
    node {
      name: "dnn/dnn/logits/fraction_of_zero_values"
      op: "ScalarSummary"
      input: "dnn/dnn/logits/fraction_of_zero_values/tags"
      input: "dnn/zero_fraction_2/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dnn/dnn/logits/activation/tag"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "dnn/dnn/logits/activation"
          }
        }
      }
    }
    node {
      name: "dnn/dnn/logits/activation"
      op: "HistogramSummary"
      input: "dnn/dnn/logits/activation/tag"
      input: "dnn/logits/BiasAdd"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dnn/head/logits/Shape"
      op: "Shape"
      input: "dnn/logits/BiasAdd"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "dnn/head/logits/assert_rank/rank"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "dnn/head/logits/assert_rank/assert_type/statically_determined_correct_type"
      op: "NoOp"
    }
    node {
      name: "dnn/head/logits/assert_rank/static_checks_determined_all_ok"
      op: "NoOp"
    }
    node {
      name: "dnn/head/logits/strided_slice/stack"
      op: "Const"
      input: "^dnn/head/logits/assert_rank/static_checks_determined_all_ok"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dnn/head/logits/strided_slice/stack_1"
      op: "Const"
      input: "^dnn/head/logits/assert_rank/static_checks_determined_all_ok"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "dnn/head/logits/strided_slice/stack_2"
      op: "Const"
      input: "^dnn/head/logits/assert_rank/static_checks_determined_all_ok"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dnn/head/logits/strided_slice"
      op: "StridedSlice"
      input: "dnn/head/logits/Shape"
      input: "dnn/head/logits/strided_slice/stack"
      input: "dnn/head/logits/strided_slice/stack_1"
      input: "dnn/head/logits/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "dnn/head/logits/assert_equal/x"
      op: "Const"
      input: "^dnn/head/logits/assert_rank/static_checks_determined_all_ok"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "dnn/head/logits/assert_equal/Equal"
      op: "Equal"
      input: "dnn/head/logits/assert_equal/x"
      input: "dnn/head/logits/strided_slice"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "dnn/head/logits/assert_equal/Const"
      op: "Const"
      input: "^dnn/head/logits/assert_rank/static_checks_determined_all_ok"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "dnn/head/logits/assert_equal/All"
      op: "All"
      input: "dnn/head/logits/assert_equal/Equal"
      input: "dnn/head/logits/assert_equal/Const"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "dnn/head/logits/assert_equal/Assert/Assert"
      op: "Assert"
      input: "dnn/head/logits/assert_equal/All"
      input: "dnn/head/logits/Shape"
      attr {
        key: "T"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
    }
    node {
      name: "dnn/head/logits"
      op: "Identity"
      input: "dnn/logits/BiasAdd"
      input: "^dnn/head/logits/assert_rank/static_checks_determined_all_ok"
      input: "^dnn/head/logits/assert_equal/Assert/Assert"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "model"
          }
        }
      }
    }
    node {
      name: "save/StringJoin/inputs_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "_temp_720e9cdbfd84418c854922799537d0a5/part"
          }
        }
      }
    }
    node {
      name: "save/StringJoin"
      op: "StringJoin"
      input: "save/Const"
      input: "save/StringJoin/inputs_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "separator"
        value {
          s: ""
        }
      }
    }
    node {
      name: "save/num_shards"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "save/ShardedFilename/shard"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "save/ShardedFilename"
      op: "ShardedFilename"
      input: "save/StringJoin"
      input: "save/ShardedFilename/shard"
      input: "save/num_shards"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/SaveV2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 7
              }
            }
            string_val: "dnn/hiddenlayer_0/bias"
            string_val: "dnn/hiddenlayer_0/kernel"
            string_val: "dnn/hiddenlayer_1/bias"
            string_val: "dnn/hiddenlayer_1/kernel"
            string_val: "dnn/logits/bias"
            string_val: "dnn/logits/kernel"
            string_val: "global_step"
          }
        }
      }
    }
    node {
      name: "save/SaveV2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 7
              }
            }
            string_val: "10 0,10"
            string_val: "27 10 0,27:0,10"
            string_val: "10 0,10"
            string_val: "10 10 0,10:0,10"
            string_val: "1 0,1"
            string_val: "10 1 0,10:0,1"
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/SaveV2"
      op: "SaveV2"
      input: "save/ShardedFilename"
      input: "save/SaveV2/tensor_names"
      input: "save/SaveV2/shape_and_slices"
      input: "dnn/hiddenlayer_0/bias/part_0/read"
      input: "dnn/hiddenlayer_0/kernel/part_0/read"
      input: "dnn/hiddenlayer_1/bias/part_0/read"
      input: "dnn/hiddenlayer_1/kernel/part_0/read"
      input: "dnn/logits/bias/part_0/read"
      input: "dnn/logits/kernel/part_0/read"
      input: "global_step"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_INT64
          }
        }
      }
    }
    node {
      name: "save/control_dependency"
      op: "Identity"
      input: "save/ShardedFilename"
      input: "^save/SaveV2"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@save/ShardedFilename"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/MergeV2Checkpoints/checkpoint_prefixes"
      op: "Pack"
      input: "save/ShardedFilename"
      input: "^save/control_dependency"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "save/MergeV2Checkpoints"
      op: "MergeV2Checkpoints"
      input: "save/MergeV2Checkpoints/checkpoint_prefixes"
      input: "save/Const"
      attr {
        key: "delete_old_dirs"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/Identity"
      op: "Identity"
      input: "save/Const"
      input: "^save/control_dependency"
      input: "^save/MergeV2Checkpoints"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/RestoreV2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "dnn/hiddenlayer_0/bias"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "10 0,10"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2/tensor_names"
      input: "save/RestoreV2/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign"
      op: "Assign"
      input: "dnn/hiddenlayer_0/bias/part_0"
      input: "save/RestoreV2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_0/bias/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_1/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "dnn/hiddenlayer_0/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_1/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "27 10 0,27:0,10"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_1"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_1/tensor_names"
      input: "save/RestoreV2_1/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 27
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_1"
      op: "Assign"
      input: "dnn/hiddenlayer_0/kernel/part_0"
      input: "save/RestoreV2_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 27
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "dnn/hiddenlayer_1/bias"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "10 0,10"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_2"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_2/tensor_names"
      input: "save/RestoreV2_2/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_2"
      op: "Assign"
      input: "dnn/hiddenlayer_1/bias/part_0"
      input: "save/RestoreV2_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_1/bias/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_3/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "dnn/hiddenlayer_1/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_3/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "10 10 0,10:0,10"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_3"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_3/tensor_names"
      input: "save/RestoreV2_3/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_3"
      op: "Assign"
      input: "dnn/hiddenlayer_1/kernel/part_0"
      input: "save/RestoreV2_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_4/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "dnn/logits/bias"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_4/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "1 0,1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_4"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_4/tensor_names"
      input: "save/RestoreV2_4/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_4"
      op: "Assign"
      input: "dnn/logits/bias/part_0"
      input: "save/RestoreV2_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/logits/bias/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_5/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "dnn/logits/kernel"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_5/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "10 1 0,10:0,1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_5"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_5/tensor_names"
      input: "save/RestoreV2_5/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign_5"
      op: "Assign"
      input: "dnn/logits/kernel/part_0"
      input: "save/RestoreV2_5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/logits/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/RestoreV2_6/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "global_step"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_6/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2_6"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2_6/tensor_names"
      input: "save/RestoreV2_6/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_INT64
          }
        }
      }
    }
    node {
      name: "save/Assign_6"
      op: "Assign"
      input: "global_step"
      input: "save/RestoreV2_6"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@global_step"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/restore_shard"
      op: "NoOp"
      input: "^save/Assign"
      input: "^save/Assign_1"
      input: "^save/Assign_2"
      input: "^save/Assign_3"
      input: "^save/Assign_4"
      input: "^save/Assign_5"
      input: "^save/Assign_6"
    }
    node {
      name: "save/restore_all"
      op: "NoOp"
      input: "^save/restore_shard"
    }
    node {
      name: "init"
      op: "NoOp"
    }
    node {
      name: "init_all_tables"
      op: "NoOp"
    }
    node {
      name: "group_deps"
      op: "NoOp"
      input: "^init"
      input: "^init_all_tables"
    }
    node {
      name: "save_1/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "model"
          }
        }
      }
    }
    node {
      name: "save_1/StringJoin/inputs_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "_temp_e72326f714f74e2ea72cf1c19dfbc199/part"
          }
        }
      }
    }
    node {
      name: "save_1/StringJoin"
      op: "StringJoin"
      input: "save_1/Const"
      input: "save_1/StringJoin/inputs_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "separator"
        value {
          s: ""
        }
      }
    }
    node {
      name: "save_1/num_shards"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "save_1/ShardedFilename/shard"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "save_1/ShardedFilename"
      op: "ShardedFilename"
      input: "save_1/StringJoin"
      input: "save_1/ShardedFilename/shard"
      input: "save_1/num_shards"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save_1/SaveV2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 7
              }
            }
            string_val: "dnn/hiddenlayer_0/bias"
            string_val: "dnn/hiddenlayer_0/kernel"
            string_val: "dnn/hiddenlayer_1/bias"
            string_val: "dnn/hiddenlayer_1/kernel"
            string_val: "dnn/logits/bias"
            string_val: "dnn/logits/kernel"
            string_val: "global_step"
          }
        }
      }
    }
    node {
      name: "save_1/SaveV2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 7
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 7
              }
            }
            string_val: "10 0,10"
            string_val: "27 10 0,27:0,10"
            string_val: "10 0,10"
            string_val: "10 10 0,10:0,10"
            string_val: "1 0,1"
            string_val: "10 1 0,10:0,1"
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/SaveV2"
      op: "SaveV2"
      input: "save_1/ShardedFilename"
      input: "save_1/SaveV2/tensor_names"
      input: "save_1/SaveV2/shape_and_slices"
      input: "dnn/hiddenlayer_0/bias/part_0/read"
      input: "dnn/hiddenlayer_0/kernel/part_0/read"
      input: "dnn/hiddenlayer_1/bias/part_0/read"
      input: "dnn/hiddenlayer_1/kernel/part_0/read"
      input: "dnn/logits/bias/part_0/read"
      input: "dnn/logits/kernel/part_0/read"
      input: "global_step"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_INT64
          }
        }
      }
    }
    node {
      name: "save_1/control_dependency"
      op: "Identity"
      input: "save_1/ShardedFilename"
      input: "^save_1/SaveV2"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@save_1/ShardedFilename"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save_1/MergeV2Checkpoints/checkpoint_prefixes"
      op: "Pack"
      input: "save_1/ShardedFilename"
      input: "^save_1/control_dependency"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "save_1/MergeV2Checkpoints"
      op: "MergeV2Checkpoints"
      input: "save_1/MergeV2Checkpoints/checkpoint_prefixes"
      input: "save_1/Const"
      attr {
        key: "delete_old_dirs"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/Identity"
      op: "Identity"
      input: "save_1/Const"
      input: "^save_1/control_dependency"
      input: "^save_1/MergeV2Checkpoints"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "dnn/hiddenlayer_0/bias"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "10 0,10"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2/tensor_names"
      input: "save_1/RestoreV2/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign"
      op: "Assign"
      input: "dnn/hiddenlayer_0/bias/part_0"
      input: "save_1/RestoreV2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_0/bias/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_1/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "dnn/hiddenlayer_0/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_1/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "27 10 0,27:0,10"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_1"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_1/tensor_names"
      input: "save_1/RestoreV2_1/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 27
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_1"
      op: "Assign"
      input: "dnn/hiddenlayer_0/kernel/part_0"
      input: "save_1/RestoreV2_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 27
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "dnn/hiddenlayer_1/bias"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "10 0,10"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_2"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_2/tensor_names"
      input: "save_1/RestoreV2_2/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_2"
      op: "Assign"
      input: "dnn/hiddenlayer_1/bias/part_0"
      input: "save_1/RestoreV2_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_1/bias/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_3/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "dnn/hiddenlayer_1/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_3/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "10 10 0,10:0,10"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_3"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_3/tensor_names"
      input: "save_1/RestoreV2_3/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_3"
      op: "Assign"
      input: "dnn/hiddenlayer_1/kernel/part_0"
      input: "save_1/RestoreV2_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_4/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "dnn/logits/bias"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_4/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "1 0,1"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_4"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_4/tensor_names"
      input: "save_1/RestoreV2_4/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_4"
      op: "Assign"
      input: "dnn/logits/bias/part_0"
      input: "save_1/RestoreV2_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/logits/bias/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_5/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "dnn/logits/kernel"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_5/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "10 1 0,10:0,1"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_5"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_5/tensor_names"
      input: "save_1/RestoreV2_5/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save_1/Assign_5"
      op: "Assign"
      input: "dnn/logits/kernel/part_0"
      input: "save_1/RestoreV2_5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@dnn/logits/kernel/part_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/RestoreV2_6/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "global_step"
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_6/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save_1/RestoreV2_6"
      op: "RestoreV2"
      input: "save_1/Const"
      input: "save_1/RestoreV2_6/tensor_names"
      input: "save_1/RestoreV2_6/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_INT64
          }
        }
      }
    }
    node {
      name: "save_1/Assign_6"
      op: "Assign"
      input: "global_step"
      input: "save_1/RestoreV2_6"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@global_step"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save_1/restore_shard"
      op: "NoOp"
      input: "^save_1/Assign"
      input: "^save_1/Assign_1"
      input: "^save_1/Assign_2"
      input: "^save_1/Assign_3"
      input: "^save_1/Assign_4"
      input: "^save_1/Assign_5"
      input: "^save_1/Assign_6"
    }
    node {
      name: "save_1/restore_all"
      op: "NoOp"
      input: "^save_1/restore_shard"
    }
    versions {
      producer: 24
    }
  }
  saver_def {
    filename_tensor_name: "save_1/Const:0"
    save_tensor_name: "save_1/Identity:0"
    restore_op_name: "save_1/restore_all"
    max_to_keep: 5
    sharded: true
    keep_checkpoint_every_n_hours: 10000.0
    version: V2
  }
  collection_def {
    key: "cond_context"
    value {
      bytes_list {
        value: "\nqdnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/cond_text\022qdnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id:0\032rdnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t:0 \001*\345\002\n|dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency:0\nqdnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id:0\nrdnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_t:0"
        value: "\nsdnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/cond_text_1\022qdnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id:0\032rdnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_f:0*\316\013\n\033ParseExample/ParseExample:1\nZdnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/All:0\nwdnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch:0\nydnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_1:0\nydnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_2:0\n~dnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/control_dependency_1:0\nqdnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/pred_id:0\nrdnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/switch_f:0\nEdnn/input_from_feature_columns/input_layer/x2_indicator/num_buckets:0\022\302\001\nEdnn/input_from_feature_columns/input_layer/x2_indicator/num_buckets:0\022ydnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_2:0\022\325\001\nZdnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/All:0\022wdnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch:0\022\230\001\n\033ParseExample/ParseExample:1\022ydnn/input_from_feature_columns/input_layer/x2_indicator/assert_less_than_num_buckets/Assert/AssertGuard/Assert/Switch_1:0"
        value: "\nndnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/cond_text\022ndnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/pred_id:0\032odnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t:0 \001*\334\002\nydnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency:0\nndnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/pred_id:0\nodnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_t:0"
        value: "\npdnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/cond_text_1\022ndnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/pred_id:0\032odnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_f:0*\254\010\n\033ParseExample/ParseExample:1\nWdnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/All:0\ntdnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch:0\nvdnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch_1:0\n{dnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/control_dependency_1:0\nndnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/pred_id:0\nodnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/switch_f:0\022\225\001\n\033ParseExample/ParseExample:1\022vdnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch_1:0\022\317\001\nWdnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/All:0\022tdnn/input_from_feature_columns/input_layer/x2_indicator/assert_greater_or_equal_0/Assert/AssertGuard/Assert/Switch:0"
      }
    }
  }
  collection_def {
    key: "global_step"
    value {
      node_list {
        value: "global_step:0"
      }
    }
  }
  collection_def {
    key: "legacy_init_op"
    value {
      node_list {
        value: "group_deps"
      }
    }
  }
  collection_def {
    key: "summaries"
    value {
      node_list {
        value: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values:0"
        value: "dnn/dnn/hiddenlayer_0/activation:0"
        value: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values:0"
        value: "dnn/dnn/hiddenlayer_1/activation:0"
        value: "dnn/dnn/logits/fraction_of_zero_values:0"
        value: "dnn/dnn/logits/activation:0"
      }
    }
  }
  collection_def {
    key: "trainable_variables"
    value {
      bytes_list {
        value: "\n!dnn/hiddenlayer_0/kernel/part_0:0\022&dnn/hiddenlayer_0/kernel/part_0/Assign\032&dnn/hiddenlayer_0/kernel/part_0/read:0\"&\n\030dnn/hiddenlayer_0/kernel\022\002\033\n\032\002\000\000\"\002\033\n2<dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform:0"
        value: "\n\037dnn/hiddenlayer_0/bias/part_0:0\022$dnn/hiddenlayer_0/bias/part_0/Assign\032$dnn/hiddenlayer_0/bias/part_0/read:0\"!\n\026dnn/hiddenlayer_0/bias\022\001\n\032\001\000\"\001\n21dnn/hiddenlayer_0/bias/part_0/Initializer/zeros:0"
        value: "\n!dnn/hiddenlayer_1/kernel/part_0:0\022&dnn/hiddenlayer_1/kernel/part_0/Assign\032&dnn/hiddenlayer_1/kernel/part_0/read:0\"&\n\030dnn/hiddenlayer_1/kernel\022\002\n\n\032\002\000\000\"\002\n\n2<dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform:0"
        value: "\n\037dnn/hiddenlayer_1/bias/part_0:0\022$dnn/hiddenlayer_1/bias/part_0/Assign\032$dnn/hiddenlayer_1/bias/part_0/read:0\"!\n\026dnn/hiddenlayer_1/bias\022\001\n\032\001\000\"\001\n21dnn/hiddenlayer_1/bias/part_0/Initializer/zeros:0"
        value: "\n\032dnn/logits/kernel/part_0:0\022\037dnn/logits/kernel/part_0/Assign\032\037dnn/logits/kernel/part_0/read:0\"\037\n\021dnn/logits/kernel\022\002\n\001\032\002\000\000\"\002\n\00125dnn/logits/kernel/part_0/Initializer/random_uniform:0"
        value: "\n\030dnn/logits/bias/part_0:0\022\035dnn/logits/bias/part_0/Assign\032\035dnn/logits/bias/part_0/read:0\"\032\n\017dnn/logits/bias\022\001\001\032\001\000\"\001\0012*dnn/logits/bias/part_0/Initializer/zeros:0"
      }
    }
  }
  collection_def {
    key: "variables"
    value {
      bytes_list {
        value: "\n\rglobal_step:0\022\022global_step/Assign\032\022global_step/read:02\037global_step/Initializer/zeros:0"
        value: "\n!dnn/hiddenlayer_0/kernel/part_0:0\022&dnn/hiddenlayer_0/kernel/part_0/Assign\032&dnn/hiddenlayer_0/kernel/part_0/read:0\"&\n\030dnn/hiddenlayer_0/kernel\022\002\033\n\032\002\000\000\"\002\033\n2<dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform:0"
        value: "\n\037dnn/hiddenlayer_0/bias/part_0:0\022$dnn/hiddenlayer_0/bias/part_0/Assign\032$dnn/hiddenlayer_0/bias/part_0/read:0\"!\n\026dnn/hiddenlayer_0/bias\022\001\n\032\001\000\"\001\n21dnn/hiddenlayer_0/bias/part_0/Initializer/zeros:0"
        value: "\n!dnn/hiddenlayer_1/kernel/part_0:0\022&dnn/hiddenlayer_1/kernel/part_0/Assign\032&dnn/hiddenlayer_1/kernel/part_0/read:0\"&\n\030dnn/hiddenlayer_1/kernel\022\002\n\n\032\002\000\000\"\002\n\n2<dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform:0"
        value: "\n\037dnn/hiddenlayer_1/bias/part_0:0\022$dnn/hiddenlayer_1/bias/part_0/Assign\032$dnn/hiddenlayer_1/bias/part_0/read:0\"!\n\026dnn/hiddenlayer_1/bias\022\001\n\032\001\000\"\001\n21dnn/hiddenlayer_1/bias/part_0/Initializer/zeros:0"
        value: "\n\032dnn/logits/kernel/part_0:0\022\037dnn/logits/kernel/part_0/Assign\032\037dnn/logits/kernel/part_0/read:0\"\037\n\021dnn/logits/kernel\022\002\n\001\032\002\000\000\"\002\n\00125dnn/logits/kernel/part_0/Initializer/random_uniform:0"
        value: "\n\030dnn/logits/bias/part_0:0\022\035dnn/logits/bias/part_0/Assign\032\035dnn/logits/bias/part_0/read:0\"\032\n\017dnn/logits/bias\022\001\001\032\001\000\"\001\0012*dnn/logits/bias/part_0/Initializer/zeros:0"
      }
    }
  }
  signature_def {
    key: "predict"
    value {
      inputs {
        key: "examples"
        value {
          name: "input_example_tensor:0"
          dtype: DT_STRING
          tensor_shape {
            dim {
              size: -1
            }
          }
        }
      }
      outputs {
        key: "predictions"
        value {
          name: "dnn/head/logits:0"
          dtype: DT_FLOAT
          tensor_shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
        }
      }
      method_name: "tensorflow/serving/predict"
    }
  }
  signature_def {
    key: "regression"
    value {
      inputs {
        key: "inputs"
        value {
          name: "input_example_tensor:0"
          dtype: DT_STRING
          tensor_shape {
            dim {
              size: -1
            }
          }
        }
      }
      outputs {
        key: "outputs"
        value {
          name: "dnn/head/logits:0"
          dtype: DT_FLOAT
          tensor_shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
        }
      }
      method_name: "tensorflow/serving/regress"
    }
  }
  signature_def {
    key: "serving_default"
    value {
      inputs {
        key: "inputs"
        value {
          name: "input_example_tensor:0"
          dtype: DT_STRING
          tensor_shape {
            dim {
              size: -1
            }
          }
        }
      }
      outputs {
        key: "outputs"
        value {
          name: "dnn/head/logits:0"
          dtype: DT_FLOAT
          tensor_shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
        }
      }
      method_name: "tensorflow/serving/regress"
    }
  }
}
